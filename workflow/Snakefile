import os
import glob
import pandas as pd
from snakemake.utils import min_version

min_version('7.16.0')

configfile: '../config/hpcnode.yaml'

# Haplotype names. Used for finding haplotype fasta
HAPS = ['occ1', 'occ2', 'pall1', 'pall2']

# Define absolute path to pipeline resources
RESOURCES = os.path.abspath(config['resources'])

GENEMARK = config['genemark']
PROTHINT = config['prothint']

# Input files
HAPLOTYPE_FASTA_DIR = f"{RESOURCES}/haplotype_fastas"
HCN_LOCI_FASTA = f"{RESOURCES}/hcn_loci/T-repens_HCN_genes.fasta"
GENMAP_RESOURCE_DIR = f"{RESOURCES}/genMap"
REPBASE = f"{RESOURCES}/RepBaseRepeatMaskerEdition-20181026.tar.gz"
IPRSCAN_DATA = f"{RESOURCES}/interproscan-5.61-93.0/data"
ORGANELLE_SEQS = f"{RESOURCES}/organelles/organelle_seqs.fasta"
TRR_FIVE_SCAFFS = f"{RESOURCES}/TrR_v5_scaff_byLG.csv"
TRR_FIVE_FASTA = config['TrR_five_fasta']
NCBI_TEMPLATE = f"{RESOURCES}/ncbi_template.sbt" 
CHROMOSOMES = pd.read_table(f"{RESOURCES}/chromosome_file.txt", header=None).iloc[:,0].tolist()

RNASEQ_ACCESSIONS = pd.read_csv(f"{RESOURCES}/Trepens_rnaseq_accessions_select.txt", sep = '\t')['accession'].tolist()
KOOYERS_RNASEQ = [f for f in os.listdir(config['kooyers_rnaseq']) if f.startswith('TR')]

# Variables for specific rules
ALL_RNASEQ_SAMPLES = RNASEQ_ACCESSIONS + KOOYERS_RNASEQ

# Paths for output files
LOG_DIR = config['log_prefix']
BLAST_DIR = f"{config['results_prefix']}/blast"
MINIMAP_DIR = f"{config['results_prefix']}/minimap"
ANNOTATION_DIR = f"{config['results_prefix']}/annotation"
PROGRAM_RESOURCE_DIR = f"{config['results_prefix']}/program_resources"
REFERENCE_ASSEMBLIES_DIR = f"{config['results_prefix']}/reference_assemblies"
QC_DIR = f"{config['results_prefix']}/qc"
REVISED_HAP_DIR = f"{config['results_prefix']}/revised_haplotypes"
NCBI_DIR = f"{config['results_prefix']}/ncbi"

HAP_VS_HAP = [f'{i}-{j}' for i in HAPS for j in HAPS if i != j]

wildcard_constraints:
    acc = '|'.join(ALL_RNASEQ_SAMPLES)

include: 'rules/common.smk'

rule all:
    input:
        f'{BLAST_DIR}/blast.done',
        f'{MINIMAP_DIR}/minimap.done',
        f'{REFERENCE_ASSEMBLIES_DIR}/reference_assemblies.done',
        f"{ANNOTATION_DIR}/annotation.done",
        f'{QC_DIR}/qc.done',
        f"{NCBI_DIR}/haploid/UTM_Trep_v1.0.scaffolds.fa"

include: 'rules/minimap.smk'
include: 'rules/blast.smk'
include: 'rules/assemble_references.smk'
include: 'rules/annotation.smk'
include: 'rules/qc.smk'

rule collect_haploid_ref_files:
    input:
       fasta = f"{rules.funannotate_annotate.output}/annotate_results/Trifolium_repens.scaffolds.fa", 
       prot = f"{rules.funannotate_annotate.output}/annotate_results/Trifolium_repens.proteins.fa", 
       gff3 = f"{rules.funannotate_annotate.output}/annotate_results/Trifolium_repens.gff3", 
       agp = f"{rules.funannotate_annotate.output}/annotate_results/Trifolium_repens.agp", 
       gbk = f"{rules.funannotate_annotate.output}/annotate_results/Trifolium_repens.gbk", 
       tbl = f"{rules.funannotate_annotate.output}/annotate_results/Trifolium_repens.tbl"
    output:
       fasta = f"{NCBI_DIR}/haploid/UTM_Trep_v1.0.scaffolds.fa", 
       prot = f"{NCBI_DIR}/haploid/UTM_Trep_v1.0.proteins.fa", 
       gff3 = f"{NCBI_DIR}/haploid/UTM_Trep_v1.0.gff3", 
       agp = f"{NCBI_DIR}/haploid/UTM_Trep_v1.0.agp", 
       gbk = f"{NCBI_DIR}/haploid/UTM_Trep_v1.0.gbk", 
       tbl = f"{NCBI_DIR}/haploid/UTM_Trep_v1.0.tbl"
    shell:
        """
        cp {input.fasta} {output.fasta}
        cp {input.prot} {output.prot}
        cp {input.gff3} {output.gff3}
        cp {input.agp} {output.agp}
        cp {input.gbk} {output.gbk}
        cp {input.tbl} {output.tbl}
        """
        



